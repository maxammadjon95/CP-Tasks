#include <iostream>
using namespace std;

#define MAX 100

class QueueArray {
private:
    int arr[MAX];
    int front, rear;

public:
    QueueArray() {
        front = rear = -1;
    }

    void enqueue(int val) {
        if (rear >= MAX - 1) {
            cout << "Queue Overflow\n";
            return;
        }
        if (front == -1) front = 0;
        arr[++rear] = val;
    }

    void dequeue() {
        if (front == -1 || front > rear) {
            cout << "Queue Underflow\n";
            return;
        }
        cout << "Dequeued: " << arr[front++] << endl;
    }

    int peek() {
        if (front == -1 || front > rear) {
            cout << "Queue is Empty\n";
            return -1;
        }
        return arr[front];
    }

    bool is_empty() {
        return front == -1 || front > rear;
    }

    void display() {
        if (is_empty()) {
            cout << "Queue is Empty\n";
            return;
        }
        cout << "Queue (front to rear): ";
        for (int i = front; i <= rear; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    QueueArray q;

    q.enqueue(5);
    q.enqueue(10);
    q.enqueue(15);
    q.display();

    cout << "Front element: " << q.peek() << endl;

    q.dequeue();
    q.display();

    return 0;
}


/*
#include <iostream>
using namespace std;

class QueueNode {
public:
    int data;
    QueueNode* next;

    QueueNode(int val) {
        data = val;
        next = nullptr;
    }
};

class QueueList {
private:
    QueueNode* front;
    QueueNode* rear;

public:
    QueueList() {
        front = rear = nullptr;
    }

    void enqueue(int val) {
        QueueNode* new_node = new QueueNode(val);
        if (!rear) {
            front = rear = new_node;
            return;
        }
        rear->next = new_node;
        rear = new_node;
    }

    void dequeue() {
        if (!front) {
            cout << "Queue Underflow\n";
            return;
        }
        cout << "Dequeued: " << front->data << endl;
        QueueNode* to_delete = front;
        front = front->next;
        if (!front) rear = nullptr;
        delete to_delete;
    }

    int peek() {
        if (!front) {
            cout << "Queue is Empty\n";
            return -1;
        }
        return front->data;
    }

    bool is_empty() {
        return front == nullptr;
    }

    void display() {
        if (!front) {
            cout << "Queue is Empty\n";
            return;
        }
        QueueNode* temp = front;
        cout << "Queue (front to rear): ";
        while (temp) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    QueueList q;

    q.enqueue(7);
    q.enqueue(14);
    q.enqueue(21);
    q.display();

    cout << "Front element: " << q.peek() << endl;

    q.dequeue();
    q.display();

    return 0;
}
*/
